{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport numGraphemeClusters from '@stdlib/string-num-grapheme-clusters';\nimport nextGraphemeClusterBreak from '@stdlib/string-next-grapheme-cluster-break';\nimport format from '@stdlib/string-format';\nimport round from '@stdlib/math-base-special-round';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Truncates a string in the middle to a specified length.\n*\n* @param {string} str - input string\n* @param {integer} len - output string length (including sequence)\n* @param {string} [seq='...'] - custom replacement sequence\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a string\n* @returns {string} truncated string\n*\n* @example\n* var str = 'beep boop';\n* var out = truncateMiddle( str, 5 );\n* // returns 'b...p'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncateMiddle( str, 5, '>>>' );\n* // returns 'b>>>p'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncateMiddle( str, 10 );\n* // returns 'beep boop'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncateMiddle( str, 0 );\n* // returns ''\n*\n* @example\n* var str = 'beep boop';\n* var out = truncateMiddle( str, 2 );\n* // returns '..'\n*\n* @example\n* var str = '🐺 Wolf Brothers 🐺';\n* var out = truncateMiddle( str, 7 );\n* // returns '🐺 ... 🐺'\n*/\nfunction truncateMiddle( str, len, seq ) {\n\tvar seqLength;\n\tvar fromIndex;\n\tvar strLength;\n\tvar seqStart;\n\tvar nVisual;\n\tvar seqEnd;\n\tvar idx2;\n\tvar idx1;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isString( seq ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a string. Value: `%s`.', seq ) );\n\t\t}\n\t}\n\tseq = seq || '...';\n\tseqLength = numGraphemeClusters( seq );\n\tstrLength = numGraphemeClusters( str );\n\tfromIndex = 0;\n\tif ( len > strLength ) {\n\t\treturn str;\n\t}\n\tif ( len - seqLength < 0 ) {\n\t\treturn seq.slice( 0, len );\n\t}\n\tseqStart = round( ( len - seqLength ) / 2 );\n\tseqEnd = strLength - floor( ( len - seqLength ) / 2 );\n\tnVisual = 0;\n\twhile ( nVisual < seqStart ) {\n\t\tidx1 = nextGraphemeClusterBreak( str, fromIndex );\n\t\tfromIndex = idx1;\n\t\tnVisual += 1;\n\t}\n\tidx2 = idx1;\n\twhile ( idx2 > 0 ) {\n\t\tidx2 = nextGraphemeClusterBreak( str, fromIndex );\n\t\tif ( idx2 >= seqEnd + fromIndex - nVisual ) {\n\t\t\tbreak;\n\t\t}\n\t\tfromIndex = idx2;\n\t\tnVisual += 1;\n\t}\n\treturn str.substring( 0, idx1 ) + seq + str.substring( idx2 );\n}\n\n\n// EXPORTS //\n\nexport default truncateMiddle;\n"],"names":["truncateMiddle","str","len","seq","seqLength","fromIndex","strLength","seqStart","nVisual","seqEnd","idx2","idx1","isString","TypeError","format","isNonNegativeInteger","arguments","length","numGraphemeClusters","slice","round","floor","nextGraphemeClusterBreak","substring"],"mappings":";;itBA0EA,SAASA,EAAgBC,EAAKC,EAAKC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAUX,GACf,MAAM,IAAIY,UAAWC,EAAQ,kEAAmEb,IAEjG,IAAMc,EAAsBb,GAC3B,MAAM,IAAIW,UAAWC,EAAQ,gFAAiFZ,IAE/G,GAAKc,UAAUC,OAAS,IACjBL,EAAUT,GACf,MAAM,IAAIU,UAAWC,EAAQ,kEAAmEX,IAOlG,GAHAC,EAAYc,EADZf,EAAMA,GAAO,OAGbE,EAAY,EACPH,GAFLI,EAAYY,EAAqBjB,IAGhC,OAAOA,EAER,GAAKC,EAAME,EAAY,EACtB,OAAOD,EAAIgB,MAAO,EAAGjB,GAKtB,IAHAK,EAAWa,GAASlB,EAAME,GAAc,GACxCK,EAASH,EAAYe,GAASnB,EAAME,GAAc,GAClDI,EAAU,EACFA,EAAUD,GAEjBF,EADAM,EAAOW,EAA0BrB,EAAKI,GAEtCG,GAAW,EAGZ,IADAE,EAAOC,EACCD,EAAO,MACdA,EAAOY,EAA0BrB,EAAKI,KACzBI,EAASJ,EAAYG,IAGlCH,EAAYK,EACZF,GAAW,EAEZ,OAAOP,EAAIsB,UAAW,EAAGZ,GAASR,EAAMF,EAAIsB,UAAWb,EACxD"}